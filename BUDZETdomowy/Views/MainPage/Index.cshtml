@model HomeBudget.Models.MainPageViewModel

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<div class="row">
    <div class="col-md-6">
        <h3 class="display-4">Financial Summary</h3>
        <div class="financial-summary special-background">
            <p><i class="fas fa-money-bill-wave"></i>  Total Income: <span>@ViewBag.TotalIncome</span></p>
        </div>
        <div class="financial-summary special-background">
            <p><i class="fas fa-shopping-cart"></i>  Total Expense: <span>@ViewBag.TotalExpense</span></p>
        </div>
        <div class="financial-summary special-background">
            <p><i class="fas fa-balance-scale"></i>  Balance: <span>@ViewBag.Balance</span></p>
        </div>
    </div>
    <div class="col-md-6">
        <div id='calendar' class="special-background" ></div>
    </div>
</div>


<form method="post" asp-action="Index">
    <div>
        <label asp-for="CurrencyId" class="control-label">Change currency</label>
        <select asp-for="CurrencyId" class="form-control" asp-items="@(new SelectList(ViewBag.Currencies, "Id", "Code"))" onchange="this.form.submit()">
        </select>
        <span asp-validation-for="CurrencyId" class="text-danger"></span>
    </div>
</form>

<h3 class="display-4">Income vs Expense and Category Expenses</h3>
<div class="chart-container d-flex justify-content-between special-background">
    <div style="flex: 1; margin-right: 10px;">
        <canvas id="myChart" width="400" height="200"></canvas>
    </div>
    <div style="flex: 0.5;">
        <canvas id="categoryChart" width="200" height="200"></canvas>
    </div>
</div>

<h3 class="display-4">Recent Transactions</h3>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Date</th>
            <th>Category</th>
            <th>Amount</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in ViewBag.RecentTransactions)
        {
            <tr>
                <td>@transaction.Date.ToString("yyyy-MM-dd h:mm")</td>
                <td>@Html.Raw(transaction.Category.Icon) @transaction.Category.CategoryName</td>
                <td>@string.Format("{0:0.00}", transaction.Amount)</td>
                <td>@transaction.Note</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.13/index.global.min.js'></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                events: '/Event/GetEvents',
                dateClick: function (info) {
                    //mozemy dodac poprzez klikniecie
                }
            });
            calendar.render();
        });
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#transactionsTable').DataTable();
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Data for the charts
        var chartData = @Html.Raw(Json.Serialize(ViewBag.ChartData));
        var categoryExpenses = @Html.Raw(Json.Serialize(ViewBag.CategoryExpenses));

        // Process data for the line chart
        var labels = chartData.map(item => item.label);
        var incomeData = chartData.map(item => item.income);
        var expenseData = chartData.map(item => item.expense);

        // Data for the doughnut chart
        var categoryLabels = categoryExpenses.map(item => item.category);
        var categoryAmounts = categoryExpenses.map(item => item.totalAmount);
        var colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF8A80', '#DCE775', '#FFD180', '#A1887F', '#80CBC4']; // Add more colors if needed

        // Function to create the line chart
        function createChart(theme) {
            var ctx = document.getElementById('myChart').getContext('2d');

            var backgroundColor, borderColor, gridColor, fontColor;

            if (theme === 'dark') {
                backgroundColor = ['rgba(54, 162, 235, 0.2)', 'rgba(255, 99, 132, 0.2)'];
                borderColor = ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)'];
                gridColor = 'rgba(255, 255, 255, 0.1)';
                fontColor = '#fff';
            } else {
                backgroundColor = ['rgba(54, 162, 235, 0.2)', 'rgba(255, 99, 132, 0.2)'];
                borderColor = ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)'];
                gridColor = 'rgba(0, 0, 0, 0.1)';
                fontColor = '#000';
            }

            var chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Income',
                        backgroundColor: backgroundColor[0],
                        borderColor: borderColor[0],
                        borderWidth: 2,
                        data: incomeData,
                        fill: true,
                        tension: 0.4
                    }, {
                        label: 'Expense',
                        backgroundColor: backgroundColor[1],
                        borderColor: borderColor[1],
                        borderWidth: 2,
                        data: expenseData,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: fontColor
                            }
                        },
                        y: {
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: fontColor,
                                beginAtZero: true
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: fontColor
                            }
                        },
                        tooltip: {
                            backgroundColor: theme === 'dark' ? '#333' : '#fff',
                            titleColor: theme === 'dark' ? '#fff' : '#000',
                            bodyColor: theme === 'dark' ? '#fff' : '#000'
                        }
                    }
                }
            });

            return chart;
        }

        // Function to create the doughnut chart
        function createCategoryChart(theme) {
            var ctx = document.getElementById('categoryChart').getContext('2d');

            if (categoryLabels.length === 0) {
                // If no categories, create an empty chart
                var emptyChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['No Data'],
                        datasets: [{
                            data: [1], // Any value to keep consistency
                            backgroundColor: ['#eee'], // Background color for no data
                            borderWidth: 0 // No border
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false // Hide legend
                            },
                            tooltip: {
                                enabled: false // Disable tooltips
                            }
                        }
                    }
                });

                return emptyChart;
            } else {
                // Create chart with category data
                var backgroundColor = [];
                var borderColor = [];

                for (var i = 0; i < categoryLabels.length; i++) {
                    var colorIndex = i % colors.length;
                    backgroundColor.push(colors[colorIndex]);
                    borderColor.push('#fff'); // Border for each segment will be white
                }

                var chart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: categoryLabels,
                        datasets: [{
                            label: 'Category Expenses',
                            backgroundColor: backgroundColor,
                            borderColor: borderColor,
                            borderWidth: 1,
                            data: categoryAmounts
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                labels: {
                                    color: theme === 'dark' ? '#fff' : '#000'
                                }
                            },
                            tooltip: {
                                backgroundColor: theme === 'dark' ? '#333' : '#fff',
                                titleColor: theme === 'dark' ? '#fff' : '#000',
                                bodyColor: theme === 'dark' ? '#fff' : '#000'
                            }
                        }
                    }
                });

                return chart;
            }
        }

        // Initialize charts with default theme
        var theme = document.body.classList.contains('dark-theme') ? 'dark' : 'light';
        var myChart = createChart(theme);
        var categoryChart = createCategoryChart(theme);

        // Handle theme switching
        document.querySelector('.theme-toggle-btn').addEventListener('click', function () {
            theme = document.body.classList.contains('dark-theme') ? 'light' : 'dark';
            myChart.destroy();
            categoryChart.destroy();
            myChart = createChart(theme);
            categoryChart = createCategoryChart(theme);
        });
    </script>
}
